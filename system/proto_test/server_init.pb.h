// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_init.proto

#ifndef PROTOBUF_INCLUDED_server_5finit_2eproto
#define PROTOBUF_INCLUDED_server_5finit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5finit_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5finit_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_server_5finit_2eproto();
class packetIn;
class packetInDefaultTypeInternal;
extern packetInDefaultTypeInternal _packetIn_default_instance_;
class packetOut;
class packetOutDefaultTypeInternal;
extern packetOutDefaultTypeInternal _packetOut_default_instance_;
namespace google {
namespace protobuf {
template<> ::packetIn* Arena::CreateMaybeMessage<::packetIn>(Arena*);
template<> ::packetOut* Arena::CreateMaybeMessage<::packetOut>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class packetIn final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:packetIn) */ {
 public:
  packetIn();
  virtual ~packetIn();

  packetIn(const packetIn& from);

  inline packetIn& operator=(const packetIn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  packetIn(packetIn&& from) noexcept
    : packetIn() {
    *this = ::std::move(from);
  }

  inline packetIn& operator=(packetIn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const packetIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const packetIn* internal_default_instance() {
    return reinterpret_cast<const packetIn*>(
               &_packetIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(packetIn* other);
  friend void swap(packetIn& a, packetIn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline packetIn* New() const final {
    return CreateMaybeMessage<packetIn>(nullptr);
  }

  packetIn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<packetIn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const packetIn& from);
  void MergeFrom(const packetIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(packetIn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serverCtrlIp = 1;
  void clear_serverctrlip();
  static const int kServerCtrlIpFieldNumber = 1;
  const ::std::string& serverctrlip() const;
  void set_serverctrlip(const ::std::string& value);
  #if LANG_CXX11
  void set_serverctrlip(::std::string&& value);
  #endif
  void set_serverctrlip(const char* value);
  void set_serverctrlip(const char* value, size_t size);
  ::std::string* mutable_serverctrlip();
  ::std::string* release_serverctrlip();
  void set_allocated_serverctrlip(::std::string* serverctrlip);

  // string serverNicIp = 2;
  void clear_servernicip();
  static const int kServerNicIpFieldNumber = 2;
  const ::std::string& servernicip() const;
  void set_servernicip(const ::std::string& value);
  #if LANG_CXX11
  void set_servernicip(::std::string&& value);
  #endif
  void set_servernicip(const char* value);
  void set_servernicip(const char* value, size_t size);
  ::std::string* mutable_servernicip();
  ::std::string* release_servernicip();
  void set_allocated_servernicip(::std::string* servernicip);

  // @@protoc_insertion_point(class_scope:packetIn)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serverctrlip_;
  ::google::protobuf::internal::ArenaStringPtr servernicip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5finit_2eproto;
};
// -------------------------------------------------------------------

class packetOut final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:packetOut) */ {
 public:
  packetOut();
  virtual ~packetOut();

  packetOut(const packetOut& from);

  inline packetOut& operator=(const packetOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  packetOut(packetOut&& from) noexcept
    : packetOut() {
    *this = ::std::move(from);
  }

  inline packetOut& operator=(packetOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const packetOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const packetOut* internal_default_instance() {
    return reinterpret_cast<const packetOut*>(
               &_packetOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(packetOut* other);
  friend void swap(packetOut& a, packetOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline packetOut* New() const final {
    return CreateMaybeMessage<packetOut>(nullptr);
  }

  packetOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<packetOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const packetOut& from);
  void MergeFrom(const packetOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(packetOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 torId = 1;
  void clear_torid();
  static const int kTorIdFieldNumber = 1;
  ::google::protobuf::int32 torid() const;
  void set_torid(::google::protobuf::int32 value);

  // int32 randVal = 2;
  void clear_randval();
  static const int kRandValFieldNumber = 2;
  ::google::protobuf::int32 randval() const;
  void set_randval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:packetOut)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 torid_;
  ::google::protobuf::int32 randval_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5finit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// packetIn

// string serverCtrlIp = 1;
inline void packetIn::clear_serverctrlip() {
  serverctrlip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& packetIn::serverctrlip() const {
  // @@protoc_insertion_point(field_get:packetIn.serverCtrlIp)
  return serverctrlip_.GetNoArena();
}
inline void packetIn::set_serverctrlip(const ::std::string& value) {
  
  serverctrlip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packetIn.serverCtrlIp)
}
#if LANG_CXX11
inline void packetIn::set_serverctrlip(::std::string&& value) {
  
  serverctrlip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packetIn.serverCtrlIp)
}
#endif
inline void packetIn::set_serverctrlip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverctrlip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packetIn.serverCtrlIp)
}
inline void packetIn::set_serverctrlip(const char* value, size_t size) {
  
  serverctrlip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packetIn.serverCtrlIp)
}
inline ::std::string* packetIn::mutable_serverctrlip() {
  
  // @@protoc_insertion_point(field_mutable:packetIn.serverCtrlIp)
  return serverctrlip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packetIn::release_serverctrlip() {
  // @@protoc_insertion_point(field_release:packetIn.serverCtrlIp)
  
  return serverctrlip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packetIn::set_allocated_serverctrlip(::std::string* serverctrlip) {
  if (serverctrlip != nullptr) {
    
  } else {
    
  }
  serverctrlip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverctrlip);
  // @@protoc_insertion_point(field_set_allocated:packetIn.serverCtrlIp)
}

// string serverNicIp = 2;
inline void packetIn::clear_servernicip() {
  servernicip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& packetIn::servernicip() const {
  // @@protoc_insertion_point(field_get:packetIn.serverNicIp)
  return servernicip_.GetNoArena();
}
inline void packetIn::set_servernicip(const ::std::string& value) {
  
  servernicip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packetIn.serverNicIp)
}
#if LANG_CXX11
inline void packetIn::set_servernicip(::std::string&& value) {
  
  servernicip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packetIn.serverNicIp)
}
#endif
inline void packetIn::set_servernicip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servernicip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packetIn.serverNicIp)
}
inline void packetIn::set_servernicip(const char* value, size_t size) {
  
  servernicip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packetIn.serverNicIp)
}
inline ::std::string* packetIn::mutable_servernicip() {
  
  // @@protoc_insertion_point(field_mutable:packetIn.serverNicIp)
  return servernicip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packetIn::release_servernicip() {
  // @@protoc_insertion_point(field_release:packetIn.serverNicIp)
  
  return servernicip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packetIn::set_allocated_servernicip(::std::string* servernicip) {
  if (servernicip != nullptr) {
    
  } else {
    
  }
  servernicip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servernicip);
  // @@protoc_insertion_point(field_set_allocated:packetIn.serverNicIp)
}

// -------------------------------------------------------------------

// packetOut

// int32 torId = 1;
inline void packetOut::clear_torid() {
  torid_ = 0;
}
inline ::google::protobuf::int32 packetOut::torid() const {
  // @@protoc_insertion_point(field_get:packetOut.torId)
  return torid_;
}
inline void packetOut::set_torid(::google::protobuf::int32 value) {
  
  torid_ = value;
  // @@protoc_insertion_point(field_set:packetOut.torId)
}

// int32 randVal = 2;
inline void packetOut::clear_randval() {
  randval_ = 0;
}
inline ::google::protobuf::int32 packetOut::randval() const {
  // @@protoc_insertion_point(field_get:packetOut.randVal)
  return randval_;
}
inline void packetOut::set_randval(::google::protobuf::int32 value) {
  
  randval_ = value;
  // @@protoc_insertion_point(field_set:packetOut.randVal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_server_5finit_2eproto
